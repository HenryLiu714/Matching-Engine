// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/trademessage.proto

#include "trademessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NewOrderMessage::NewOrderMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.transaction_time_)*/uint64_t{0u}
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_.order_quantity_)*/0
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.price_)*/0} {}
struct NewOrderMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewOrderMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewOrderMessageDefaultTypeInternal() {}
  union {
    NewOrderMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewOrderMessageDefaultTypeInternal _NewOrderMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_protocols_2ftrademessage_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protocols_2ftrademessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protocols_2ftrademessage_2eproto = nullptr;

const uint32_t TableStruct_protocols_2ftrademessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.side_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.transaction_time_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.order_quantity_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::NewOrderMessage, _impl_.price_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::NewOrderMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NewOrderMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protocols_2ftrademessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034protocols/trademessage.proto\"\316\001\n\017NewOr"
  "derMessage\022\020\n\010order_id\030\001 \001(\r\022\017\n\007user_id\030"
  "\002 \001(\r\022\016\n\006symbol\030\003 \001(\t\022\030\n\004side\030\004 \001(\0162\n.Di"
  "rection\022\030\n\020transaction_time\030\005 \001(\004\022\026\n\016ord"
  "er_quantity\030\006 \001(\002\022\036\n\norder_type\030\007 \001(\0162\n."
  "OrderType\022\022\n\005price\030\010 \001(\002H\000\210\001\001B\010\n\006_price*"
  " \n\tDirection\022\010\n\004LONG\020\000\022\t\n\005SHORT\020\001*\"\n\tOrd"
  "erType\022\n\n\006MARKET\020\000\022\t\n\005LIMIT\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_protocols_2ftrademessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protocols_2ftrademessage_2eproto = {
    false, false, 317, descriptor_table_protodef_protocols_2ftrademessage_2eproto,
    "protocols/trademessage.proto",
    &descriptor_table_protocols_2ftrademessage_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_protocols_2ftrademessage_2eproto::offsets,
    file_level_metadata_protocols_2ftrademessage_2eproto, file_level_enum_descriptors_protocols_2ftrademessage_2eproto,
    file_level_service_descriptors_protocols_2ftrademessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protocols_2ftrademessage_2eproto_getter() {
  return &descriptor_table_protocols_2ftrademessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protocols_2ftrademessage_2eproto(&descriptor_table_protocols_2ftrademessage_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocols_2ftrademessage_2eproto);
  return file_level_enum_descriptors_protocols_2ftrademessage_2eproto[0];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocols_2ftrademessage_2eproto);
  return file_level_enum_descriptors_protocols_2ftrademessage_2eproto[1];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NewOrderMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NewOrderMessage>()._impl_._has_bits_);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewOrderMessage::NewOrderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NewOrderMessage)
}
NewOrderMessage::NewOrderMessage(const NewOrderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewOrderMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.transaction_time_){}
    , decltype(_impl_.side_){}
    , decltype(_impl_.order_quantity_){}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.price_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.order_id_, &from._impl_.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:NewOrderMessage)
}

inline void NewOrderMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.order_id_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.transaction_time_){uint64_t{0u}}
    , decltype(_impl_.side_){0}
    , decltype(_impl_.order_quantity_){0}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.price_){0}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewOrderMessage::~NewOrderMessage() {
  // @@protoc_insertion_point(destructor:NewOrderMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewOrderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
}

void NewOrderMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewOrderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:NewOrderMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_type_) -
      reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.order_type_));
  _impl_.price_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewOrderMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NewOrderMessage.symbol"));
        } else
          goto handle_unusual;
        continue;
      // .Direction side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 transaction_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.transaction_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float order_quantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.order_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .OrderType order_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_type(static_cast<::OrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional float price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_price(&has_bits);
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewOrderMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewOrderMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 order_id = 1;
  if (this->_internal_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_order_id(), target);
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string symbol = 3;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewOrderMessage.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // .Direction side = 4;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  // uint64 transaction_time = 5;
  if (this->_internal_transaction_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_transaction_time(), target);
  }

  // float order_quantity = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_order_quantity = this->_internal_order_quantity();
  uint32_t raw_order_quantity;
  memcpy(&raw_order_quantity, &tmp_order_quantity, sizeof(tmp_order_quantity));
  if (raw_order_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_order_quantity(), target);
  }

  // .OrderType order_type = 7;
  if (this->_internal_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_order_type(), target);
  }

  // optional float price = 8;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewOrderMessage)
  return target;
}

size_t NewOrderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewOrderMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 3;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // uint32 order_id = 1;
  if (this->_internal_order_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_order_id());
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint64 transaction_time = 5;
  if (this->_internal_transaction_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transaction_time());
  }

  // .Direction side = 4;
  if (this->_internal_side() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
  }

  // float order_quantity = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_order_quantity = this->_internal_order_quantity();
  uint32_t raw_order_quantity;
  memcpy(&raw_order_quantity, &tmp_order_quantity, sizeof(tmp_order_quantity));
  if (raw_order_quantity != 0) {
    total_size += 1 + 4;
  }

  // .OrderType order_type = 7;
  if (this->_internal_order_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_type());
  }

  // optional float price = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewOrderMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewOrderMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewOrderMessage::GetClassData() const { return &_class_data_; }


void NewOrderMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewOrderMessage*>(&to_msg);
  auto& from = static_cast<const NewOrderMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NewOrderMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_order_id() != 0) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_transaction_time() != 0) {
    _this->_internal_set_transaction_time(from._internal_transaction_time());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_order_quantity = from._internal_order_quantity();
  uint32_t raw_order_quantity;
  memcpy(&raw_order_quantity, &tmp_order_quantity, sizeof(tmp_order_quantity));
  if (raw_order_quantity != 0) {
    _this->_internal_set_order_quantity(from._internal_order_quantity());
  }
  if (from._internal_order_type() != 0) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (from._internal_has_price()) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewOrderMessage::CopyFrom(const NewOrderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewOrderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrderMessage::IsInitialized() const {
  return true;
}

void NewOrderMessage::InternalSwap(NewOrderMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewOrderMessage, _impl_.price_)
      + sizeof(NewOrderMessage::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(NewOrderMessage, _impl_.order_id_)>(
          reinterpret_cast<char*>(&_impl_.order_id_),
          reinterpret_cast<char*>(&other->_impl_.order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewOrderMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocols_2ftrademessage_2eproto_getter, &descriptor_table_protocols_2ftrademessage_2eproto_once,
      file_level_metadata_protocols_2ftrademessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NewOrderMessage*
Arena::CreateMaybeMessage< ::NewOrderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewOrderMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
