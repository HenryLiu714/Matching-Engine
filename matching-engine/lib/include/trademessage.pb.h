// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/trademessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocols_2ftrademessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocols_2ftrademessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocols_2ftrademessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocols_2ftrademessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocols_2ftrademessage_2eproto;
class NewOrderMessage;
struct NewOrderMessageDefaultTypeInternal;
extern NewOrderMessageDefaultTypeInternal _NewOrderMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NewOrderMessage* Arena::CreateMaybeMessage<::NewOrderMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Direction : int {
  LONG = 0,
  SHORT = 1,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = LONG;
constexpr Direction Direction_MAX = SHORT;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
enum OrderType : int {
  MARKET = 0,
  LIMIT = 1,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = MARKET;
constexpr OrderType OrderType_MAX = LIMIT;
constexpr int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor();
template<typename T>
inline const std::string& OrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderType_descriptor(), enum_t_value);
}
inline bool OrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
// ===================================================================

class NewOrderMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NewOrderMessage) */ {
 public:
  inline NewOrderMessage() : NewOrderMessage(nullptr) {}
  ~NewOrderMessage() override;
  explicit PROTOBUF_CONSTEXPR NewOrderMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewOrderMessage(const NewOrderMessage& from);
  NewOrderMessage(NewOrderMessage&& from) noexcept
    : NewOrderMessage() {
    *this = ::std::move(from);
  }

  inline NewOrderMessage& operator=(const NewOrderMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewOrderMessage& operator=(NewOrderMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewOrderMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewOrderMessage* internal_default_instance() {
    return reinterpret_cast<const NewOrderMessage*>(
               &_NewOrderMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewOrderMessage& a, NewOrderMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NewOrderMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewOrderMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewOrderMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewOrderMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewOrderMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewOrderMessage& from) {
    NewOrderMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewOrderMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NewOrderMessage";
  }
  protected:
  explicit NewOrderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 3,
    kOrderIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kTransactionTimeFieldNumber = 5,
    kSideFieldNumber = 4,
    kOrderQuantityFieldNumber = 6,
    kOrderTypeFieldNumber = 7,
    kPriceFieldNumber = 8,
  };
  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint32 order_id = 1;
  void clear_order_id();
  uint32_t order_id() const;
  void set_order_id(uint32_t value);
  private:
  uint32_t _internal_order_id() const;
  void _internal_set_order_id(uint32_t value);
  public:

  // uint32 user_id = 2;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // uint64 transaction_time = 5;
  void clear_transaction_time();
  uint64_t transaction_time() const;
  void set_transaction_time(uint64_t value);
  private:
  uint64_t _internal_transaction_time() const;
  void _internal_set_transaction_time(uint64_t value);
  public:

  // .Direction side = 4;
  void clear_side();
  ::Direction side() const;
  void set_side(::Direction value);
  private:
  ::Direction _internal_side() const;
  void _internal_set_side(::Direction value);
  public:

  // float order_quantity = 6;
  void clear_order_quantity();
  float order_quantity() const;
  void set_order_quantity(float value);
  private:
  float _internal_order_quantity() const;
  void _internal_set_order_quantity(float value);
  public:

  // .OrderType order_type = 7;
  void clear_order_type();
  ::OrderType order_type() const;
  void set_order_type(::OrderType value);
  private:
  ::OrderType _internal_order_type() const;
  void _internal_set_order_type(::OrderType value);
  public:

  // optional float price = 8;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:NewOrderMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    uint32_t order_id_;
    uint32_t user_id_;
    uint64_t transaction_time_;
    int side_;
    float order_quantity_;
    int order_type_;
    float price_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocols_2ftrademessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewOrderMessage

// uint32 order_id = 1;
inline void NewOrderMessage::clear_order_id() {
  _impl_.order_id_ = 0u;
}
inline uint32_t NewOrderMessage::_internal_order_id() const {
  return _impl_.order_id_;
}
inline uint32_t NewOrderMessage::order_id() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.order_id)
  return _internal_order_id();
}
inline void NewOrderMessage::_internal_set_order_id(uint32_t value) {
  
  _impl_.order_id_ = value;
}
inline void NewOrderMessage::set_order_id(uint32_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:NewOrderMessage.order_id)
}

// uint32 user_id = 2;
inline void NewOrderMessage::clear_user_id() {
  _impl_.user_id_ = 0u;
}
inline uint32_t NewOrderMessage::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t NewOrderMessage::user_id() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.user_id)
  return _internal_user_id();
}
inline void NewOrderMessage::_internal_set_user_id(uint32_t value) {
  
  _impl_.user_id_ = value;
}
inline void NewOrderMessage::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:NewOrderMessage.user_id)
}

// string symbol = 3;
inline void NewOrderMessage::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& NewOrderMessage::symbol() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewOrderMessage::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NewOrderMessage.symbol)
}
inline std::string* NewOrderMessage::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:NewOrderMessage.symbol)
  return _s;
}
inline const std::string& NewOrderMessage::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void NewOrderMessage::_internal_set_symbol(const std::string& value) {
  
  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* NewOrderMessage::_internal_mutable_symbol() {
  
  return _impl_.symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* NewOrderMessage::release_symbol() {
  // @@protoc_insertion_point(field_release:NewOrderMessage.symbol)
  return _impl_.symbol_.Release();
}
inline void NewOrderMessage::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_.SetAllocated(symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NewOrderMessage.symbol)
}

// .Direction side = 4;
inline void NewOrderMessage::clear_side() {
  _impl_.side_ = 0;
}
inline ::Direction NewOrderMessage::_internal_side() const {
  return static_cast< ::Direction >(_impl_.side_);
}
inline ::Direction NewOrderMessage::side() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.side)
  return _internal_side();
}
inline void NewOrderMessage::_internal_set_side(::Direction value) {
  
  _impl_.side_ = value;
}
inline void NewOrderMessage::set_side(::Direction value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:NewOrderMessage.side)
}

// uint64 transaction_time = 5;
inline void NewOrderMessage::clear_transaction_time() {
  _impl_.transaction_time_ = uint64_t{0u};
}
inline uint64_t NewOrderMessage::_internal_transaction_time() const {
  return _impl_.transaction_time_;
}
inline uint64_t NewOrderMessage::transaction_time() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.transaction_time)
  return _internal_transaction_time();
}
inline void NewOrderMessage::_internal_set_transaction_time(uint64_t value) {
  
  _impl_.transaction_time_ = value;
}
inline void NewOrderMessage::set_transaction_time(uint64_t value) {
  _internal_set_transaction_time(value);
  // @@protoc_insertion_point(field_set:NewOrderMessage.transaction_time)
}

// float order_quantity = 6;
inline void NewOrderMessage::clear_order_quantity() {
  _impl_.order_quantity_ = 0;
}
inline float NewOrderMessage::_internal_order_quantity() const {
  return _impl_.order_quantity_;
}
inline float NewOrderMessage::order_quantity() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.order_quantity)
  return _internal_order_quantity();
}
inline void NewOrderMessage::_internal_set_order_quantity(float value) {
  
  _impl_.order_quantity_ = value;
}
inline void NewOrderMessage::set_order_quantity(float value) {
  _internal_set_order_quantity(value);
  // @@protoc_insertion_point(field_set:NewOrderMessage.order_quantity)
}

// .OrderType order_type = 7;
inline void NewOrderMessage::clear_order_type() {
  _impl_.order_type_ = 0;
}
inline ::OrderType NewOrderMessage::_internal_order_type() const {
  return static_cast< ::OrderType >(_impl_.order_type_);
}
inline ::OrderType NewOrderMessage::order_type() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.order_type)
  return _internal_order_type();
}
inline void NewOrderMessage::_internal_set_order_type(::OrderType value) {
  
  _impl_.order_type_ = value;
}
inline void NewOrderMessage::set_order_type(::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:NewOrderMessage.order_type)
}

// optional float price = 8;
inline bool NewOrderMessage::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewOrderMessage::has_price() const {
  return _internal_has_price();
}
inline void NewOrderMessage::clear_price() {
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float NewOrderMessage::_internal_price() const {
  return _impl_.price_;
}
inline float NewOrderMessage::price() const {
  // @@protoc_insertion_point(field_get:NewOrderMessage.price)
  return _internal_price();
}
inline void NewOrderMessage::_internal_set_price(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.price_ = value;
}
inline void NewOrderMessage::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:NewOrderMessage.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Direction>() {
  return ::Direction_descriptor();
}
template <> struct is_proto_enum< ::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OrderType>() {
  return ::OrderType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocols_2ftrademessage_2eproto
